import os
import shutil
# ProteoSeeker modules
import command_process
import supportive_functions


def cd_hit(cdhit_env, output_path_cdhit, prs_source, output_fgs_protein_formatted_1, output_fgs_protein_formatted_2, cd_hit_results_path, cd_hit_results_fasta_path, cd_hit_t, cd_hit_path, cd_hit_mem, thread_num, input_log_file, output_log_file, cdhit_bash_script, cd_hit_version_path, cd_hit_stdoe_path, conda_sh_path):
    print("\nRunning CD-HIT...")
    if os.path.exists(output_path_cdhit):
        shutil.rmtree(output_path_cdhit)
    os.mkdir(output_path_cdhit)
    # Use the proteins generated by the gene prediction tool or the ones encoded by the selected genetic code.
    if prs_source == 1:
        if not os.path.exists(output_fgs_protein_formatted_1):
            print("Error. Source file for proteins from FragGeneScanRs does not exist.")
        output_proteins_formatted = output_fgs_protein_formatted_1
    elif prs_source == 2:
        if not os.path.exists(output_fgs_protein_formatted_2):
            print("Error. Source file for proteins based on the encoding of the genes found from FragGeneScanRs based on the selected genetic code does not exist.")
        output_proteins_formatted = output_fgs_protein_formatted_2
    else:
        output_proteins_formatted = None
    # Number of proteins before CD-HIT.
    cd_hit_bef_pr_num = 0
    if os.path.exists(output_proteins_formatted):
        output_prs_form_lines = supportive_functions.read_file(output_proteins_formatted)
        for line in output_prs_form_lines:
            if line[0] == ">":
                cd_hit_bef_pr_num += 1
    print("\nNumber of proteins before CD-HIT: {}".format(cd_hit_bef_pr_num))
    # If there is an output file with proteins from the gene prediction algorithm, run CD-HIT.
    if os.path.exists(output_proteins_formatted):
        if cd_hit_path:
            phrase_1 = "\"{}\" -i \"{}\" -c {} -o \"{}\" -M {} -T {} -g 1 &> \"{}\"".format(cd_hit_path, output_proteins_formatted, cd_hit_t, cd_hit_results_path, cd_hit_mem, thread_num, cd_hit_stdoe_path)
            phrase_2 = "{} -h > {}".format(cd_hit_path, cd_hit_version_path)
        else:
            phrase_1 = "cd-hit -i \"{}\" -c {} -o \"{}\" -M {} -T {} -g 1 &> \"{}\"".format(output_proteins_formatted, cd_hit_t, cd_hit_results_path, cd_hit_mem, thread_num, cd_hit_stdoe_path)
            phrase_2 = "cd-hit -h > \"{}\"".format(cd_hit_version_path)
        # Create the Bash script.
        # Four cases: 1: Conda environment and path needed for the script. 2: Conda environment and no path needed for the script. 3: No conda environment and path needed for the script. 4: No conda environment and no path needed for the script.
        new_file_bash = open(cdhit_bash_script, "w")
        phrase = "#!/bin/bash"
        new_file_bash.write("{}\n".format(phrase))
        if cdhit_env:
            phrase_s = "source \"{}\"".format(conda_sh_path)
            phrase_a = "conda activate \"{}\"".format(cdhit_env)
            new_file_bash.write("{}\n".format(phrase_s))
            new_file_bash.write("{}\n".format(phrase_a))
        new_file_bash.write("{}\n".format(phrase_1))
        new_file_bash.write("{}\n".format(phrase_2))
        if cdhit_env:
            phrase = "conda deactivate"
            new_file_bash.write("{}\n".format(phrase))
        new_file_bash.close()
        # Making the Bash script executable.
        # Sending command to run.
        phrase_b1 = "chmod +x {}".format(cdhit_bash_script)
        phrase_b2 = "chmod --version"
        title_1 = "Making a Bash script executable:"
        title_2 = "Version of chmod:"
        capture_status = True
        shell_status = True
        pr_status = False
        command_process.command_run(phrase_b1, phrase_b2, title_1, title_2, capture_status, shell_status, pr_status, input_log_file, output_log_file)
        # Sending command to run.
        phrase_b1 = "bash {}".format(cdhit_bash_script)
        phrase_b2 = "bash --version"
        title_1 = "Running bash:"
        title_2 = "Version of bash:"
        capture_status = True
        shell_status = True
        pr_status = False
        command_process.command_run(phrase_b1, phrase_b2, title_1, title_2, capture_status, shell_status, pr_status, input_log_file, output_log_file)
        # Process the output file.
        if os.path.getsize(cd_hit_results_path) != 0:
            new_file_cd_hit_formatted = open(cd_hit_results_fasta_path, "w")
            with open(cd_hit_results_path) as cdhit_results_file:
                for line in cdhit_results_file:
                    line = line.rstrip("\n")
                    if line[0] == ">":
                        new_file_cd_hit_formatted.write("{}\n".format(line))
                    else:
                        split_size = 70
                        fasta_splited = [line[ssi:ssi + split_size] for ssi in range(0, len(line), split_size)]
                        for fasta_line in fasta_splited:
                            new_file_cd_hit_formatted.write("{}\n".format(fasta_line))
            new_file_cd_hit_formatted.close()
    else:
        print("No genes found.")
        exit()
    # The number of proteins remaining after CD-HIT which are to be checked for the specified domains.
    protein_titles = []
    if os.path.exists(cd_hit_results_path):
        with open(cd_hit_results_path) as contig_file:
            for line in contig_file:
                line = line.rstrip("\n")
                if line[0] == ">":
                    protein_titles.append(line)
    prs_cd_hit_num = len(protein_titles)
    print("\nNumber of proteins after CD-HIT: {}".format(prs_cd_hit_num))