import os
import shutil
# ProteoSeeker modules
import command_process


def fastqc(fastqc_env, output_path_fastqc, file_paths, fastqc_path, clear, thread_num, input_log_file, output_log_file, fastqc_bash_script, fastqc_version_path, fastqc_stdoe_path, conda_sh_path, fastqc_par):
    print("\nRunning FastQC...")
    if clear:
        # The results folder and the folder for the temporary files generated by FastQC is created if FastQC is run for the first time in the pipeline.
        if os.path.exists(output_path_fastqc):
            shutil.rmtree(output_path_fastqc)
        os.mkdir(output_path_fastqc)
    
    # Tool parameters
    if fastqc_par is None:
        fastqc_par = " -t {} ".format(thread_num)
    else:
        if fastqc_par[0] != " ":
            fastqc_par = " {}".format(fastqc_par)
        if fastqc_par[-1] != " ":
            fastqc_par = "{} ".format(fastqc_par)

    # Create the Bash script.
    # Four cases: 1: Conda environment and path needed for the script. 2: Conda environment and no path needed for the script. 3: No conda environment and path needed for the script. 4: No conda environment and no path needed for the script.
    new_file_bash = open(fastqc_bash_script, "w")
    phrase = "#!/bin/bash"
    new_file_bash.write("{}\n".format(phrase))
    if fastqc_env:
        phrase_s = "source \"{}\"".format(conda_sh_path)
        phrase_a = "conda activate \"{}\"".format(fastqc_env)
        new_file_bash.write("{}\n".format(phrase_s))
        new_file_bash.write("{}\n".format(phrase_a))
    if fastqc_path:
        phrase_1 = "\"{}\"{}-o \"{}\"".format(fastqc_path, fastqc_par, output_path_fastqc)
        phrase_2 = "\"{}\" --version > \"{}\"".format(fastqc_path, fastqc_version_path)
    else:
        phrase_1 = "fastqc{}-o \"{}\"".format(fastqc_par, output_path_fastqc)
        phrase_2 = "fastqc --version > \"{}\"".format(fastqc_version_path)

    # Add each file to be analyzed at the end of the phrase.
    for i in file_paths:
        phrase_1 = "{} \"{}\"".format(phrase_1, i)
    phrase_1 = "{} &> \"{}\"".format(phrase_1, fastqc_stdoe_path)
    new_file_bash.write("{}\n".format(phrase_1))
    new_file_bash.write("{}\n".format(phrase_2))
    if fastqc_env:
        phrase = "conda deactivate"
        new_file_bash.write("{}\n".format(phrase))
    new_file_bash.close()

    # Making the Bash script executable.
    # Sending command to run.
    phrase_b1 = "chmod +x {}".format(fastqc_bash_script)
    phrase_b2 = "chmod --version"
    title_1 = "Making a Bash script executable:"
    title_2 = "Version of chmod:"
    capture_status = True
    shell_status = True
    pr_status = False
    command_process.command_run(phrase_b1, phrase_b2, title_1, title_2, capture_status, shell_status, pr_status, input_log_file, output_log_file)
    # Sending command to run.
    phrase_b1 = "bash {}".format(fastqc_bash_script)
    phrase_b2 = "bash --version"
    title_1 = "Running bash:"
    title_2 = "Version of bash:"
    capture_status = True
    shell_status = True
    pr_status = False
    command_process.command_run(phrase_b1, phrase_b2, title_1, title_2, capture_status, shell_status, pr_status, input_log_file, output_log_file)